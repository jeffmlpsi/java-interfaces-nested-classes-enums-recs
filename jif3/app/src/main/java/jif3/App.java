/*
 * This source file was generated by the Gradle 'init' task
 */
package jif3;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());

        // Demonstrate usage of InfoEnum and InfoRec, enum and record
        InfoEnum level = InfoEnum.CONFIDENTIAL;
        // record is immutable, so we set values at creation time, we cannot change them later
        InfoRec record = new InfoRec(1, "Sample Data", level);
        System.out.println("Record: id=" + record.id() + ", data=" + record.data() + ", level=" + record.level());

        // Demonstrate usage of inner class, defined below
        Inner inner = new Inner();
        inner.printX();

        // Demonstrate usage of outer interface with an anonymous class
        InterfaceNesting interfaceImpl = new InterfaceNesting() {
            @Override
            public void interfaceMethod() {
                System.out.println("Interface method implementation");
            }
        };
        // demonstrate usage of nested interface with an anonymous class
        interfaceImpl.interfaceMethod();
        // Demonstrate usage of nested interface
        InterfaceNesting.NestedInterface nestedImpl = new InterfaceNesting.NestedInterface() {
            @Override
            public void nestedMethod() {
                System.out.println("Nested method implementation"); 
            }
        };
        nestedImpl.nestedMethod();

        // Local nested class implementing both interfaces, a non local class can be defined in a similar ways
        class Local implements InterfaceNesting, InterfaceNesting.NestedInterface {
            @Override
            public void interfaceMethod() {
                System.out.println("Local class implementing interface method");
            }
            @Override
            public void nestedMethod() {
                System.out.println("Local class implementing nested method");
            }
        }
        Local local = new Local();
        local.interfaceMethod();
        local.nestedMethod();
    }

    int instanceVar = 1;
    static int outerX = 100;
    /*
     * Inner class can access instance and static members of the outer class
     * You can access a static inner/nested class without an instance of the outer class
     */
    static class Inner {
        int x = 10;
        void printX() {
            System.out.println("x = " + x + ", outerX = " + outerX);
            // instanceVar is not accessible here
        }
    }
}
